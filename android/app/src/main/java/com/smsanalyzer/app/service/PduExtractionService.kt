package com.smsanalyzer.app.service

import android.app.Service
import android.content.Intent
import android.os.IBinder
import android.util.Log
import com.smsanalyzer.app.database.DatabaseHelper
import com.smsanalyzer.app.model.PduAnalysis
import com.smsanalyzer.app.parser.PduParser
import java.util.*

class PduExtractionService : Service() {

    companion object {
        private const val TAG = "PduExtractionService"
    }

    private lateinit var databaseHelper: DatabaseHelper
    private lateinit var pduParser: PduParser

    override fun onCreate() {
        super.onCreate()
        databaseHelper = DatabaseHelper(this)
        pduParser = PduParser()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        intent?.let { processIntent(it) }
        return START_NOT_STICKY
    }

    private fun processIntent(intent: Intent) {
        val pduHex = intent.getStringExtra("pdu_hex")
        val sender = intent.getStringExtra("sender")
        val message = intent.getStringExtra("message")
        val timestamp = intent.getLongExtra("timestamp", System.currentTimeMillis())

        if (pduHex != null) {
            Log.d(TAG, "Processing PDU: $pduHex")
            
            try {
                val parseResult = pduParser.parse(pduHex)
                
                val pduAnalysis = PduAnalysis(
                    id = 0, // Will be auto-generated by database
                    rawPdu = pduHex,
                    pduType = parseResult.pduType,
                    sender = parseResult.sender ?: sender ?: "Unknown",
                    message = parseResult.message ?: message ?: "No message",
                    timestamp = Date(timestamp),
                    encoding = parseResult.encoding,
                    messageLength = parseResult.messageLength,
                    smscLength = parseResult.smscLength,
                    smscType = parseResult.smscType,
                    senderLength = parseResult.senderLength,
                    status = parseResult.status,
                    errorMessage = parseResult.errorMessage,
                    technicalDetails = parseResult.technicalDetails,
                    createdAt = Date()
                )
                
                databaseHelper.insertPduAnalysis(pduAnalysis)
                Log.d(TAG, "PDU analysis saved to database")
                
                // Send broadcast to notify UI about new PDU
                val broadcastIntent = Intent("com.smsanalyzer.app.NEW_PDU_ANALYZED").apply {
                    putExtra("pdu_analysis", pduAnalysis)
                }
                sendBroadcast(broadcastIntent)
                
            } catch (e: Exception) {
                Log.e(TAG, "Error parsing PDU", e)
                
                // Save error case
                val errorAnalysis = PduAnalysis(
                    id = 0,
                    rawPdu = pduHex,
                    pduType = "Error",
                    sender = sender ?: "Unknown",
                    message = message ?: "Unable to parse",
                    timestamp = Date(timestamp),
                    encoding = "Unknown",
                    messageLength = 0,
                    smscLength = 0,
                    smscType = "Unknown",
                    senderLength = 0,
                    status = "Error",
                    errorMessage = e.message,
                    technicalDetails = emptyList(),
                    createdAt = Date()
                )
                
                databaseHelper.insertPduAnalysis(errorAnalysis)
            }
        }
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }
}